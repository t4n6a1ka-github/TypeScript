=== tests/cases/compiler/truthinessCallExpressionCoercion.ts ===
function onlyErrorsWhenTestingNonNullableFunctionType(required: () => boolean, optional?: () => boolean) {
>onlyErrorsWhenTestingNonNullableFunctionType : (required: () => boolean, optional?: (() => boolean) | undefined) => void
>required : () => boolean
>optional : (() => boolean) | undefined

    if (required) { // error
>required : () => boolean
    }

    if (optional) { // ok
>optional : (() => boolean) | undefined
    }

    if (!!required) { // ok
>!!required : true
>!required : false
>required : () => boolean
    }

    if (required()) { // ok
>required() : boolean
>required : () => boolean
    }
}

function onlyErrorsWhenUnusedInBody() {
>onlyErrorsWhenUnusedInBody : () => void

    function test() { return Math.random() > 0.5; }
>test : () => boolean
>Math.random() > 0.5 : boolean
>Math.random() : number
>Math.random : () => number
>Math : Math
>random : () => number
>0.5 : 0.5

    if (test) { // error
>test : () => boolean

        console.log('test');
>console.log('test') : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>'test' : "test"
    }
    
    if (test) { // ok
>test : () => boolean

        console.log(test);
>console.log(test) : void
>console.log : (message?: any, ...optionalParams: any[]) => void
>console : Console
>log : (message?: any, ...optionalParams: any[]) => void
>test : () => boolean
    }

    if (test) { // ok
>test : () => boolean

        test();
>test() : boolean
>test : () => boolean
    }
    
    if (test) { // ok
>test : () => boolean

        [() => null].forEach(() => {
>[() => null].forEach(() => {            test();        }) : void
>[() => null].forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
>[() => null] : (() => null)[]
>() => null : () => null
>null : null
>forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
>() => {            test();        } : () => void

            test();
>test() : boolean
>test : () => boolean

        });
    }
    
    if (test) { // error
>test : () => boolean

        [() => null].forEach(test => {
>[() => null].forEach(test => {            test();        }) : void
>[() => null].forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
>[() => null] : (() => null)[]
>() => null : () => null
>null : null
>forEach : (callbackfn: (value: () => null, index: number, array: (() => null)[]) => void, thisArg?: any) => void
>test => {            test();        } : (test: () => null) => void
>test : () => null

            test();
>test() : null
>test : () => null

        });
    }
}

function checksPropertyAccess() {
>checksPropertyAccess : () => void

    const x = {
>x : { foo: { bar(): boolean; }; }
>{        foo: {            bar() { return true; }        }    } : { foo: { bar(): boolean; }; }

        foo: {
>foo : { bar(): boolean; }
>{            bar() { return true; }        } : { bar(): boolean; }

            bar() { return true; }
>bar : () => boolean
>true : true
        }
    }

    if (x.foo.bar) { // error
>x.foo.bar : () => boolean
>x.foo : { bar(): boolean; }
>x : { foo: { bar(): boolean; }; }
>foo : { bar(): boolean; }
>bar : () => boolean
    }

    if (x.foo.bar) { // ok
>x.foo.bar : () => boolean
>x.foo : { bar(): boolean; }
>x : { foo: { bar(): boolean; }; }
>foo : { bar(): boolean; }
>bar : () => boolean

        x.foo.bar;
>x.foo.bar : () => boolean
>x.foo : { bar(): boolean; }
>x : { foo: { bar(): boolean; }; }
>foo : { bar(): boolean; }
>bar : () => boolean
    }
}

class Foo {
>Foo : Foo

    maybeIsUser?: () => boolean;
>maybeIsUser : (() => boolean) | undefined

    isUser() {
>isUser : () => boolean

        return true;
>true : true
    }

    test() {
>test : () => void

        if (this.isUser) { // error
>this.isUser : () => boolean
>this : this
>isUser : () => boolean
        }

        if (this.maybeIsUser) { // ok
>this.maybeIsUser : (() => boolean) | undefined
>this : this
>maybeIsUser : (() => boolean) | undefined
        }
    }
}

